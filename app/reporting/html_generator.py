"""
HTML Report Generation Module for Document Processing Results.

This module provides functionality to convert document processing results into
interactive HTML visualizations, allowing users to inspect the document structure,
layout analysis, OCR text, tables, and figures through a browser interface.
"""

import os
import json
import base64
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional, Union

# Define template directory and paths
TEMPLATE_DIR = Path(__file__).parent / "templates"
CSS_FILE = TEMPLATE_DIR / "report.css"
JS_FILE = TEMPLATE_DIR / "report.js"


class HTMLReportGenerator:
    """
    Generates interactive HTML reports for document processing results.
    
    This class converts the JSON output from the document processing pipeline
    into a visual HTML report that displays document structure, layout analysis,
    text extraction, tables, and figures in an interactive interface.
    """
    
    def __init__(self, output_dir: Union[str, Path] = None):
        """
        Initialize the HTML report generator.
        
        Args:
            output_dir: Directory where HTML reports will be saved.
                        If None, reports will be generated in memory only.
        """
        self.output_dir = Path(output_dir) if output_dir else None
        if self.output_dir and not self.output_dir.exists():
            self.output_dir.mkdir(parents=True, exist_ok=True)
        
        # Create template directory if it doesn't exist
        os.makedirs(TEMPLATE_DIR, exist_ok=True)
        
        # Create default CSS and JS files if they don't exist
        self._create_default_assets()
    
    def _create_default_assets(self):
        """Create default CSS and JS files if they don't exist."""
        # Create default CSS
        if not CSS_FILE.exists():
            with open(CSS_FILE, 'w') as f:
                f.write(DEFAULT_CSS)
        
        # Create default JS
        if not JS_FILE.exists():
            with open(JS_FILE, 'w') as f:
                f.write(DEFAULT_JS)
    
    def generate_report(self, 
                     documents: List[Dict[str, Any]], 
                     include_tables: bool = True,
                     include_figures: bool = True,
                     standalone: bool = False,
                     title: Optional[str] = None) -> str:
        """
        Generate an HTML report from document processing results.
        
        Args:
            documents: List of document processing results from the pipeline.
            include_tables: Whether to include tables in the report.
            include_figures: Whether to include figures in the report.
            standalone: Whether this is a standalone report or part of a larger system.
            title: Custom title for the report.
                   If None, generates based on number of documents.
                   
        Returns:
            The generated HTML report as a string.
        """
        # Set report title
        if title is None:
            if len(documents) == 1:
                doc = documents[0]
                filename = doc.get("filename", "document.pdf")
                metadata = doc.get("metadata", {})
                title = metadata.get("title", filename)
            else:
                title = f"Document Analysis Report ({len(documents)} documents)"
        
        # Generate report sections
        css = self._get_css()
        js = self._get_js()
        
        # Build the HTML report
        html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>{css}</style>
</head>
<body>
    <div class="report-container">
        <header>
            <h1>{title}</h1>
            <div class="metadata">
                <p><strong>Documents:</strong> {len(documents)}</p>
                <p><strong>Generated:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
        </header>
        
        {self._generate_report_overview(documents)}
        
        {self._generate_documents_section(documents, include_tables, include_figures)}
        
        <footer>
            <p>Generated by Semantic-Reader-Backend</p>
        </footer>
    </div>
    
    <script>{js}</script>
</body>
</html>"""
        
        return html
    
    def _generate_report_overview(self, documents: List[Dict[str, Any]]) -> str:
        """Generate an overview section for multiple documents."""
        overview_html = "<section class='overview-section'>\n"
        overview_html += "<h2>Report Overview</h2>\n"
        
        # Count totals across all documents
        total_pages = 0
        total_blocks = 0
        total_tables = 0
        total_figures = 0
        
        for doc in documents:
            pages = doc.get("pages", [])
            total_pages += len(pages)
            
            for page in pages:
                total_blocks += len(page.get("text_blocks", page.get("blocks", [])))
                total_tables += len(page.get("tables", [])) if include_tables else 0
                total_figures += len(page.get("figures", [])) if include_figures else 0
        
        # Display stats
        overview_html += "<div class='stats-container'>\n"
        overview_html += f"""<div class="stat-card">
    <h3>Documents</h3>
    <div class="stat-value">{len(documents)}</div>
</div>
<div class="stat-card">
    <h3>Pages</h3>
    <div class="stat-value">{total_pages}</div>
</div>
<div class="stat-card">
    <h3>Text Blocks</h3>
    <div class="stat-value">{total_blocks}</div>
</div>"""

        if include_tables:
            overview_html += f"""
<div class="stat-card">
    <h3>Tables</h3>
    <div class="stat-value">{total_tables}</div>
</div>"""

        if include_figures:
            overview_html += f"""
<div class="stat-card">
    <h3>Figures</h3>
    <div class="stat-value">{total_figures}</div>
</div>"""

        overview_html += "</div>\n"  # End stats-container
        
        # Document list
        overview_html += "<div class='document-list'>\n"
        overview_html += "<h3>Documents</h3>\n"
        overview_html += "<table class='metadata-table'>\n"
        overview_html += "<tr><th>ID</th><th>Title</th><th>Pages</th><th>Language</th></tr>\n"
        
        for i, doc in enumerate(documents):
            doc_id = doc.get("id", f"doc_{i}")
            metadata = doc.get("metadata", {})
            filename = doc.get("filename", "Unknown")
            title = metadata.get("title", filename)
            pages = len(doc.get("pages", []))
            language = metadata.get("language", "Unknown")
            
            overview_html += f"<tr><td>{doc_id}</td><td>{title}</td><td>{pages}</td><td>{language}</td></tr>\n"
        
        overview_html += "</table>\n"
        overview_html += "</div>\n"  # End document-list
        
        overview_html += "</section>\n"  # End overview-section
        return overview_html
    
    def _generate_documents_section(self, documents: List[Dict[str, Any]], include_tables: bool, include_figures: bool) -> str:
        """Generate sections for each document."""
        documents_html = ""
        
        for i, doc in enumerate(documents):
            doc_id = doc.get("id", f"doc_{i}")
            filename = doc.get("filename", "document.pdf")
            metadata = doc.get("metadata", {})
            title = metadata.get("title", filename)
            pages = doc.get("pages", [])
            
            documents_html += f"<section class='document-section' id='document-{doc_id}'>\n"
            documents_html += f"<h2>Document: {title}</h2>\n"
            
            # Document metadata
            documents_html += self._generate_metadata_section(metadata)
            
            # Document overview
            documents_html += self._generate_overview_section(doc)
            
            # Document pages
            documents_html += self._generate_pages_section(pages, include_tables and include_figures)
            
            documents_html += "</section>\n"
        
        return documents_html
    
    def _get_css(self) -> str:
        """Get the CSS content for the report."""
        try:
            with open(CSS_FILE, 'r') as f:
                return f.read()
        except (FileNotFoundError, IOError):
            return DEFAULT_CSS
    
    def _get_js(self) -> str:
        """Get the JavaScript content for the report."""
        try:
            with open(JS_FILE, 'r') as f:
                return f.read()
        except (FileNotFoundError, IOError):
            return DEFAULT_JS
    
    def _generate_metadata_section(self, metadata: Dict[str, Any]) -> str:
        """Generate the metadata section of the report."""
        metadata_html = "<section class='metadata-section'>\n"
        metadata_html += "<h2>Document Metadata</h2>\n"
        metadata_html += "<div class='metadata-container'>\n"
        
        # Generate table of metadata
        metadata_html += "<table class='metadata-table'>\n"
        metadata_html += "<tr><th>Property</th><th>Value</th></tr>\n"
        
        for key, value in metadata.items():
            if key in ["page_count", "title", "author", "creation_date", "language"]:
                formatted_key = key.replace("_", " ").title()
                metadata_html += f"<tr><td>{formatted_key}</td><td>{value}</td></tr>\n"
        
        # Add any remaining metadata
        for key, value in metadata.items():
            if key not in ["page_count", "title", "author", "creation_date", "language"]:
                if isinstance(value, (dict, list)):
                    continue  # Skip complex objects
                formatted_key = key.replace("_", " ").title()
                metadata_html += f"<tr><td>{formatted_key}</td><td>{value}</td></tr>\n"
        
        metadata_html += "</table>\n"
        metadata_html += "</div>\n"
        metadata_html += "</section>\n"
        
        return metadata_html
    
    def _generate_overview_section(self, document_result: Dict[str, Any]) -> str:
        """Generate the document overview section."""
        pages = document_result.get("pages", [])
        
        # Count elements
        total_blocks = 0
        total_tables = 0
        total_figures = 0
        
        for page in pages:
            total_blocks += len(page.get("text_blocks", page.get("blocks", [])))
            total_tables += len(page.get("tables", []))
            total_figures += len(page.get("figures", []))
        
        overview_html = "<section class='overview-section'>\n"
        overview_html += "<h2>Document Overview</h2>\n"
        overview_html += "<div class='stats-container'>\n"
        overview_html += f"""<div class="stat-card">
    <h3>Pages</h3>
    <div class="stat-value">{len(pages)}</div>
</div>
<div class="stat-card">
    <h3>Text Blocks</h3>
    <div class="stat-value">{total_blocks}</div>
</div>
<div class="stat-card">
    <h3>Tables</h3>
    <div class="stat-value">{total_tables}</div>
</div>
<div class="stat-card">
    <h3>Figures</h3>
    <div class="stat-value">{total_figures}</div>
</div>
"""
        overview_html += "</div>\n"
        
        # Add summary
        overview_html += "<div class='summary'>\n"
        overview_html += "<h3>Summary</h3>\n"
        overview_html += "<p>This report provides a visual representation of the document structure, "
        overview_html += "including layout analysis, text extraction, tables, and figures. "
        overview_html += "Use the page navigation to explore each page's content in detail.</p>\n"
        overview_html += "</div>\n"
        
        overview_html += "</section>\n"
        
        return overview_html
    
    def _generate_pages_section(self, pages: List[Dict[str, Any]], include_images: bool) -> str:
        """Generate the pages section with visualizations for each page."""
        pages_html = "<section class='pages-section'>\n"
        pages_html += "<h2>Document Pages</h2>\n"
        
        # Create page navigation
        pages_html += "<div class='page-navigation'>\n"
        for i in range(len(pages)):
            pages_html += f"<button class='page-nav-btn' onclick='showPage({i})'>{i+1}</button>\n"
        pages_html += "</div>\n"
        
        # Create page containers
        for i, page in enumerate(pages):
            display = "block" if i == 0 else "none"
            pages_html += f"<div id='page-{i}' class='page-container' style='display: {display};'>\n"
            pages_html += f"<h3>Page {i+1}</h3>\n"
            
            # Add page visualization
            pages_html += self._generate_page_visualization(page, i, include_images)
            
            pages_html += "</div>\n"
        
        pages_html += "</section>\n"
        
        return pages_html
    
    def _generate_page_visualization(self, page: Dict[str, Any], page_idx: int, include_images: bool) -> str:
        """Generate visualization for a specific page."""
        vis_html = "<div class='page-visualization'>\n"
        
        # Page dimensions
        width = page.get("width", 612)  # Default to 8.5x11 at 72dpi
        height = page.get("height", 792)
        
        # Create tabs for different visualizations
        vis_html += "<div class='visualization-tabs'>\n"
        vis_html += f"<button class='tab-btn active' onclick='showTab({page_idx}, \"layout\")'>Layout</button>\n"
        vis_html += f"<button class='tab-btn' onclick='showTab({page_idx}, \"text\")'>Text</button>\n"
        vis_html += f"<button class='tab-btn' onclick='showTab({page_idx}, \"tables\")'>Tables</button>\n"
        vis_html += f"<button class='tab-btn' onclick='showTab({page_idx}, \"figures\")'>Figures</button>\n"
        vis_html += "</div>\n"
        
        # Create tab content
        vis_html += "<div class='tab-content'>\n"
        
        # Layout tab (active by default)
        vis_html += f"<div id='page-{page_idx}-layout' class='tab-pane active'>\n"
        vis_html += self._generate_layout_visualization(page, width, height)
        vis_html += "</div>\n"
        
        # Text tab
        vis_html += f"<div id='page-{page_idx}-text' class='tab-pane'>\n"
        vis_html += self._generate_text_visualization(page)
        vis_html += "</div>\n"
        
        # Tables tab
        vis_html += f"<div id='page-{page_idx}-tables' class='tab-pane'>\n"
        vis_html += self._generate_tables_visualization(page)
        vis_html += "</div>\n"
        
        # Figures tab
        vis_html += f"<div id='page-{page_idx}-figures' class='tab-pane'>\n"
        vis_html += self._generate_figures_visualization(page)
        vis_html += "</div>\n"
        
        vis_html += "</div>\n"  # End tab-content
        vis_html += "</div>\n"  # End page-visualization
        
        return vis_html
    
    def _generate_layout_visualization(self, page: Dict[str, Any], width: int, height: int) -> str:
        """Generate visualization of the page layout."""
        # Scale the visualization to fit well in the report
        scale_factor = min(800 / width, 1100 / height)
        vis_width = int(width * scale_factor)
        vis_height = int(height * scale_factor)
        
        vis_html = f"<div class='layout-visualization' style='width: {vis_width}px; height: {vis_height}px;'>\n"
        
        # Get the elements to visualize
        text_blocks = page.get("text_blocks", page.get("blocks", []))
        tables = page.get("tables", [])
        figures = page.get("figures", [])
        
        # Add text blocks
        for block in text_blocks:
            x0 = block.get("x0", 0) * scale_factor
            y0 = block.get("y0", 0) * scale_factor
            x1 = block.get("x1", x0 + 10) * scale_factor
            y1 = block.get("y1", y0 + 10) * scale_factor
            
            block_html = f"""<div class="text-block" 
                style="left: {x0}px; top: {y0}px; width: {x1-x0}px; height: {y1-y0}px;"
                title="{block.get('text', '')[:100]}...">
            </div>"""
            vis_html += block_html + "\n"
        
        # Add tables
        for table in tables:
            x0 = table.get("x0", 0) * scale_factor
            y0 = table.get("y0", 0) * scale_factor
            x1 = table.get("x1", x0 + 10) * scale_factor
            y1 = table.get("y1", y0 + 10) * scale_factor
            
            table_html = f"""<div class="table-block" 
                style="left: {x0}px; top: {y0}px; width: {x1-x0}px; height: {y1-y0}px;"
                title="Table ({table.get('rows', '?')} x {table.get('cols', '?')})">
            </div>"""
            vis_html += table_html + "\n"
        
        # Add figures
        for figure in figures:
            x0 = figure.get("x0", 0) * scale_factor
            y0 = figure.get("y0", 0) * scale_factor
            x1 = figure.get("x1", x0 + 10) * scale_factor
            y1 = figure.get("y1", y0 + 10) * scale_factor
            
            figure_html = f"""<div class="figure-block" 
                style="left: {x0}px; top: {y0}px; width: {x1-x0}px; height: {y1-y0}px;"
                title="Figure">
            </div>"""
            vis_html += figure_html + "\n"
        
        vis_html += "</div>\n"
        return vis_html
    
    def _generate_text_visualization(self, page: Dict[str, Any]) -> str:
        """Generate visualization of the extracted text."""
        text_blocks = page.get("text_blocks", page.get("blocks", []))
        
        if not text_blocks:
            return "<div class='empty-message'>No text blocks found on this page.</div>"
        
        vis_html = "<div class='text-visualization'>\n"
        
        # Display text content as formatted blocks
        for i, block in enumerate(text_blocks):
            text = block.get("text", "")
            if not text:
                continue
                
            # Create a formatted text block
            vis_html += f"""<div class="extracted-text-block">
    <div class="block-header">Block {i+1}</div>
    <div class="block-coordinates">
        ({block.get('x0', 0)}, {block.get('y0', 0)}) - 
        ({block.get('x1', 0)}, {block.get('y1', 0)})
    </div>
    <div class="block-content">{text}</div>
</div>"""
        
        vis_html += "</div>\n"
        return vis_html
    
    def _generate_tables_visualization(self, page: Dict[str, Any]) -> str:
        """Generate visualization of the extracted tables."""
        tables = page.get("tables", [])
        
        if not tables:
            return "<div class='empty-message'>No tables found on this page.</div>"
        
        vis_html = "<div class='tables-visualization'>\n"
        
        # Display each table
        for i, table in enumerate(tables):
            rows = table.get("rows", 0)
            cols = table.get("cols", 0)
            cells = table.get("cells", [])
            
            vis_html += f"<div class='extracted-table'>\n"
            vis_html += f"<div class='table-header'>Table {i+1} ({rows} x {cols})</div>\n"
            
            # Create HTML table representation
            vis_html += "<table class='data-table'>\n"
            
            # Generate the table based on cells
            if cells:
                # Create a grid to place cells
                grid = [[None for _ in range(cols)] for _ in range(rows)]
                
                # Place cells in the grid
                for cell in cells:
                    row = cell.get("row", 0)
                    col = cell.get("col", 0)
                    if 0 <= row < rows and 0 <= col < cols:
                        grid[row][col] = cell
                
                # Generate table rows
                for row_idx, row in enumerate(grid):
                    vis_html += "<tr>\n"
                    for col_idx, cell in enumerate(row):
                        cell_text = cell.get("text", "") if cell else ""
                        vis_html += f"<td>{cell_text}</td>\n"
                    vis_html += "</tr>\n"
            else:
                # No cell data, create an empty table structure
                for row_idx in range(rows):
                    vis_html += "<tr>\n"
                    for col_idx in range(cols):
                        vis_html += "<td>&nbsp;</td>\n"
                    vis_html += "</tr>\n"
            
            vis_html += "</table>\n"
            vis_html += "</div>\n"
        
        vis_html += "</div>\n"
        return vis_html
    
    def _generate_figures_visualization(self, page: Dict[str, Any]) -> str:
        """Generate visualization of the extracted figures."""
        figures = page.get("figures", [])
        
        if not figures:
            return "<div class='empty-message'>No figures found on this page.</div>"
        
        vis_html = "<div class='figures-visualization'>\n"
        
        # Display each figure
        for i, figure in enumerate(figures):
            figure_type = figure.get("type", figure.get("image_type", "Unknown"))
            caption = ""
            
            if "caption" in figure:
                if isinstance(figure["caption"], dict) and "text" in figure["caption"]:
                    caption = figure["caption"]["text"]
                elif isinstance(figure["caption"], str):
                    caption = figure["caption"]
            
            vis_html += f"""<div class="extracted-figure">
    <div class="figure-header">Figure {i+1} ({figure_type})</div>
    <div class="figure-coordinates">
        ({figure.get('x0', 0)}, {figure.get('y0', 0)}) - 
        ({figure.get('x1', 0)}, {figure.get('y1', 0)})
    </div>
    <div class="figure-placeholder">
        [Figure Visualization]
    </div>
    <div class="figure-caption">{caption}</div>
</div>"""
        
        vis_html += "</div>\n"
        return vis_html


# Default CSS for the HTML report
DEFAULT_CSS = """
body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    color: #333;
    margin: 0;
    padding: 0;
    background-color: #f5f5f5;
}

.report-container {
    max-width: 1200px;
    margin: 0 auto;
    background-color: #fff;
    padding: 20px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

header {
    text-align: center;
    padding-bottom: 20px;
    border-bottom: 1px solid #eee;
    margin-bottom: 30px;
}

header h1 {
    margin-bottom: 10px;
    color: #2c3e50;
}

section {
    margin-bottom: 40px;
}

h2 {
    color: #3498db;
    border-bottom: 2px solid #3498db;
    padding-bottom: 5px;
}

h3 {
    color: #2c3e50;
}

.metadata-table {
    width: 100%;
    border-collapse: collapse;
}

.metadata-table th, .metadata-table td {
    padding: 8px 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

.metadata-table th {
    background-color: #f2f2f2;
    font-weight: bold;
}

.stats-container {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
}

.stat-card {
    flex: 1;
    background-color: #f8f9fa;
    border-radius: 5px;
    padding: 15px;
    margin: 0 10px;
    text-align: center;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.stat-card h3 {
    margin-top: 0;
    font-size: 16px;
}

.stat-value {
    font-size: 24px;
    font-weight: bold;
    color: #3498db;
}

.page-navigation {
    display: flex;
    flex-wrap: wrap;
    margin-bottom: 20px;
}

.page-nav-btn {
    padding: 8px 12px;
    margin: 5px;
    background-color: #f0f0f0;
    border: 1px solid #ddd;
    border-radius: 4px;
    cursor: pointer;
}

.page-nav-btn:hover {
    background-color: #e0e0e0;
}

.visualization-tabs {
    display: flex;
    border-bottom: 1px solid #ddd;
    margin-bottom: 15px;
}

.tab-btn {
    padding: 10px 15px;
    background-color: #f8f9fa;
    border: none;
    cursor: pointer;
}

.tab-btn.active {
    background-color: #fff;
    border: 1px solid #ddd;
    border-bottom: 2px solid #fff;
    border-top: 2px solid #3498db;
    margin-bottom: -1px;
}

.tab-content {
    min-height: 400px;
}

.tab-pane {
    display: none;
}

.tab-pane.active {
    display: block;
}

.layout-visualization {
    position: relative;
    border: 1px solid #ddd;
    background-color: #fff;
    margin: 0 auto;
}

.text-block {
    position: absolute;
    background-color: rgba(52, 152, 219, 0.3);
    border: 1px solid rgba(52, 152, 219, 0.8);
    box-sizing: border-box;
}

.table-block {
    position: absolute;
    background-color: rgba(46, 204, 113, 0.3);
    border: 1px solid rgba(46, 204, 113, 0.8);
    box-sizing: border-box;
}

.figure-block {
    position: absolute;
    background-color: rgba(231, 76, 60, 0.3);
    border: 1px solid rgba(231, 76, 60, 0.8);
    box-sizing: border-box;
}

.extracted-text-block, .extracted-table, .extracted-figure {
    background-color: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 15px;
    margin-bottom: 20px;
}

.block-header, .table-header, .figure-header {
    font-weight: bold;
    margin-bottom: 5px;
}

.block-coordinates, .figure-coordinates {
    font-size: 12px;
    color: #666;
    margin-bottom: 10px;
}

.block-content {
    white-space: pre-wrap;
    font-family: monospace;
    padding: 10px;
    background-color: #fff;
    border: 1px solid #eee;
    border-radius: 3px;
}

.data-table {
    width: 100%;
    border-collapse: collapse;
}

.data-table td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
}

.figure-placeholder {
    height: 150px;
    background-color: #eee;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 10px;
}

.figure-caption {
    font-style: italic;
    font-size: 14px;
}

.empty-message {
    padding: 20px;
    text-align: center;
    color: #999;
    font-style: italic;
}

footer {
    text-align: center;
    padding-top: 20px;
    border-top: 1px solid #eee;
    margin-top: 30px;
    color: #777;
    font-size: 14px;
}
"""

# Default JavaScript for the HTML report
DEFAULT_JS = """
// Function to show a specific page
function showPage(pageIndex) {
    // Hide all pages
    const pages = document.querySelectorAll('.page-container');
    pages.forEach(page => {
        page.style.display = 'none';
    });
    
    // Show the selected page
    const selectedPage = document.getElementById(`page-${pageIndex}`);
    if (selectedPage) {
        selectedPage.style.display = 'block';
    }
    
    // Update navigation buttons
    const buttons = document.querySelectorAll('.page-nav-btn');
    buttons.forEach((btn, idx) => {
        if (idx === pageIndex) {
            btn.classList.add('active');
        } else {
            btn.classList.remove('active');
        }
    });
}

// Function to show a specific tab
function showTab(pageIndex, tabName) {
    // Hide all tabs for this page
    const tabs = document.querySelectorAll(`#page-${pageIndex} .tab-pane`);
    tabs.forEach(tab => {
        tab.classList.remove('active');
    });
    
    // Show the selected tab
    const selectedTab = document.getElementById(`page-${pageIndex}-${tabName}`);
    if (selectedTab) {
        selectedTab.classList.add('active');
    }
    
    // Update tab buttons
    const buttons = document.querySelectorAll(`#page-${pageIndex} .tab-btn`);
    buttons.forEach(btn => {
        if (btn.innerText.toLowerCase() === tabName) {
            btn.classList.add('active');
        } else {
            btn.classList.remove('active');
        }
    });
}

// Initialize tooltips for text blocks, tables, and figures
document.addEventListener('DOMContentLoaded', function() {
    // Add any initialization code here
});
""" 